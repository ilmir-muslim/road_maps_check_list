import asyncio
import logging
import schedule
import threading
import telebot
import time
import json
import os
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram import F
from aiogram.filters.command import Command
from aiogram.dispatcher.router import Router

from studentdata import StudentData

logging.basicConfig(level=logging.INFO)
API_TOKEN = os.getenv('BOT_TOKEN')
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()


@dp.message(F.new_chat_members)
async def on_new_chat_members(message):
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    for user in message.new_chat_members:
        await bot.send_message(message.chat.id, f"–£ –Ω–∞—Å –Ω–æ–≤–µ–Ω—å–∫–∏–π - {user.full_name}, –ø—Ä–∏–≤–µ—Ç üôÇ!")
        join_date = datetime.utcfromtimestamp(message.date.timestamp()).strftime('%d.%m.%Y')
        users_name = user.full_name
        await StudentData().add_data_to_json(users_name, join_date)


@dp.message(Command('start'))
async def on_start(message: types.Message):
    # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    await message.answer(f"–±–æ—Ç –∑–∞–ø—É—â–µ–Ω ID –≥—Ä—É–ø–ø—ã, {message.chat.id}")
    chat_id = message.chat_id

@dp.message(Command('update'))
async def on_update(message):
    StudentData().update_json()
    await bot.send_message(message.chat.id, f"–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")


with open('data_tests/road_map.json', 'r') as file:
    road_map = json.load(file)

with open('data_tests/members.json', 'r') as file:
    members = json.load(file)


async def send_messages(member, message):
    await bot.send_message(member['name'], message)


@router.message(Command('progress'))
async def personal_message_for_all_members():
    StudentData().update_json()

    for member in members:

        prev_progress = str(int(member['current_progress']) - 1)
        if prev_progress in road_map:
            await send_messages(member, 'v –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç—Ç–∞–ø: ' + road_map[prev_progress])
        else:
            print(f"–ö–ª—é—á {prev_progress} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ road_map.")

        await send_messages(member, '> —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø: ' + road_map.get(member['current_progress'], "Progress not found"))

        next_progress = str(int(member['current_progress']) + 1)
        if next_progress in road_map:
            await send_messages(member, 'x —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø: ' + road_map[next_progress])
        else:
            print(f"–ö–ª—é—á {next_progress} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ road_map.")


# schedule.every().day.at("09:48").do(personal_message_for_all_members)


def run_schedule():
    while True:
        schedule.run_pending()
        time.sleep(1)


thread = threading.Thread(target=run_schedule)
thread.start()


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
